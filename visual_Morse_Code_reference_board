<!DOCTYPE html>
<html>
<div id="morseBox" style="width: 800px; height: 650px;"></div>
<script src="https://jsxgraph.org/distrib/jsxgraphcore.js"></script>
<link rel="stylesheet" href="https://jsxgraph.org/distrib/jsxgraph.css" />

<script>
const board = JXG.JSXGraph.initBoard('morseBox', {
  boundingbox: [-1, 9, 13, -1],
  showNavigation: false,
  showCopyright: false,
  axis: false
});

const morseMap = {
  A: ".-",    B: "-...",  C: "-.-.", D: "-..",  E: ".",
  F: "..-.",  G: "--.",   H: "....", I: "..",   J: ".---",
  K: "-.-",   L: ".-..",  M: "--",   N: "-.",   O: "---",
  P: ".--.",  Q: "--.-",  R: ".-.",  S: "...",  T: "-",
  U: "..-",   V: "...-",  W: ".--",  X: "-..-", Y: "-.--",
  Z: "--.."
};

// Audio setup
const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
function playBeep(duration = 200, frequency = 600) {
  const osc = audioCtx.createOscillator();
  const gain = audioCtx.createGain();

  osc.connect(gain);
  gain.connect(audioCtx.destination);

  osc.type = 'sine';
  osc.frequency.setValueAtTime(frequency, audioCtx.currentTime);
  osc.start();

  gain.gain.setValueAtTime(0.2, audioCtx.currentTime); // volume
  osc.stop(audioCtx.currentTime + duration / 1000);
}

// Flash circle
const flashCircle = board.create('circle', [[5.5, 2.5], 0.5], {
  fillColor: 'gray', fillOpacity: 0.2, strokeColor: 'black'
});
board.create('text', [4.9, 1.8, 'Light Output'], {fontSize: 14});

// Slider for speed control
// Ranges from 0.5x (slow) to 2x (fast), default 1x
const speedSlider = board.create('slider', [[1, 8], [11, 8], [0.5, 1, 2]], {
  name: 'Speed',
  snapWidth: 0.1,
  precision: 2,
  size: 4,
  color: 'blue'
});
board.create('text', [0, 8.2, 'Playback Speed (x)'], {fontSize: 14});

// Speed factor from slider
function getSpeedFactor() {
  return speedSlider.Value();  // e.g. 1.0 means normal speed
}

function flash(symbol, callback) {
  const baseDuration = symbol === '.' ? 200 : 600;
  const speed = getSpeedFactor();
  const duration = baseDuration / speed;

  flashCircle.setAttribute({fillColor: 'yellow', fillOpacity: 0.9});
  playBeep(duration);
  setTimeout(() => {
    flashCircle.setAttribute({fillColor: 'gray', fillOpacity: 0.2});
    setTimeout(callback, 200 / speed); // short pause between signals, also speed adjusted
  }, duration);
}

function playMorseCode(code, index = 0) {
  if (index >= code.length) return;
  const symbol = code[index];
  if (symbol === '.' || symbol === '-') {
    flash(symbol, () => playMorseCode(code, index + 1));
  } else {
    // Space or other char: longer pause
    setTimeout(() => playMorseCode(code, index + 1), 400 / getSpeedFactor());
  }
}

// Render grid
const letters = Object.keys(morseMap);
const cols = 7;

letters.forEach((letter, i) => {
  const col = i % cols;
  const row = Math.floor(i / cols);
  const x = col * 1.7;
  const y = 7 - row;

  const btn = board.create('text', [x, y, letter], {
    fontSize: 20,
    cssStyle: 'cursor:pointer; font-weight:bold; color:blue;'
  });

  board.create('text', [x + 0.4, y, morseMap[letter]], {
    fontSize: 16,
    cssStyle: 'color: black;'
  });

  btn.rendNode.addEventListener('click', () => {
    playMorseCode(morseMap[letter]);
  });
});
</script>


</html>

